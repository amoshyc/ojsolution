#####################################
[POJ] 3171. Cleaning Shifts
#####################################

.. sidebar:: Tags

    - ``tag_segment_tree``
    - ``tag_dp``

.. contents:: TOC
    :depth: 2

******************************************************
`題目 <http://poj.org/problem?id=3171>`_
******************************************************

數線上，給定 N 個區間 [s[i], t[i]]，每個區間有其代價，求覆蓋區間 [M, E] 的最小代價。
無解時，輸出 -1

************************
Specification
************************

::

    1 <= N <= 10000
    1 <= M <= E <= 86399
    M <= s[i] <= t[i] <= E

************************
分析
************************

.. note:: dp, 利用線段樹來壓時間複雜度

經典題…區間覆蓋最小代價，如果區間沒有代價，又要求最少區間數的話，就是 Greedy。
可參 poj 2376。

::

    dp[i][j] = 最多使用前 i + 1 個區間，使 [M, j] 被覆蓋的最小代價

考慮第 i 個區間用或不用，可得::

    dp[i][j] =
        1. min(dp[i - 1][k] for k in [s[i] - 1, t[i]]) + cost[i] if j = t[i]
        2. dp[i - 1][j] if j ≠ t[i]

壓空間::

    dp[t[i]] = min(dp[t[i]],
        min(dp[i - 1][k] for k in [s[i] - 1, t[i]]) + cost[i]
    )

使用線段樹加速，查詢 min 的地方，記得更新，細節看 code 吧。

************************
AC Code
************************

.. code-block:: cpp
    :linenos:

    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <cstdio>
    #include <cstdlib>
    #include <cstring>
    using namespace std;

    template<class T>
    struct SegTree {
        int NN;
        vector<T> seg;
        T def; // default vale

        T func(T a, T b) {
            return min(a, b);
        }

        void gather(int u) {
            seg[u] = func(seg[u * 2 + 1], seg[u * 2 + 2]);
        }

        void init(int N, T d) {
            def = d;
            NN = 1;
            while (NN < N)
                NN *= 2;

            seg = vector<T>(2 * NN - 1, def);
            // for (int i = 0; i < N; i++) {
            //     seg[NN - 1 + i] = inp[i];
            // }

            build(0);
        }

        void build(int u) {
            if (u >= NN - 1) { // leaf
                return;
            }
            build(u * 2 + 1);
            build(u * 2 + 2);
            gather(u);
        }

        void _update(int idx, T val, int u, int l, int r) {
            if (l > idx || r <= idx) {
                return;
            }

            if (l == idx && idx + 1 == r) {
                seg[u] = val;
                return;
            }

            int m = (l + r) / 2;
            _update(idx, val, u * 2 + 1, l, m);
            _update(idx, val, u * 2 + 2, m, r);
            gather(u);
        }

        T _query(int a, int b, int u, int l, int r) {
            if (l >= b || r <= a) {
                return def;
            }

            if (a <= l && r <= b) {
                return seg[u];
            }

            int m = (l + r) / 2;
            T res1 = _query(a, b, u * 2 + 1, l, m);
            T res2 = _query(a, b, u * 2 + 2, m, r);

            return func(res1, res2);
        }

        void update(int idx, T val) {
            _update(idx, val, 0, 0, NN);
        }

        T query(int a, int b) {
            return _query(a, b, 0, 0, NN);
        }
    };

    typedef long long ll;
    const int MAX_N = 10000;
    const int MAX_M = 86399;
    const ll INF = 1e18;

    struct I {
        ll s, t, cost;
        bool operator < (const I& i) const {
            if (s == i.s)
                return t < i.t;
            return s < i.s;
        }
    };

    int N, M, E;
    ll dp[MAX_M + 1];
    I A[MAX_N];
    SegTree<ll> seg;

    ll solve() {
        sort(A, A + N);

        fill(dp, dp + E + 1, INF);
        seg.init(E + 1, INF);

        int idx = 0;
        while (idx < N && A[idx].s == 0) {
            dp[A[idx].t] = min(dp[A[idx].t], A[idx].cost);
            seg.update(A[idx].t, A[idx].cost);
            idx++;
        }

        for (int i = idx; i < N; i++) {
            ll v = min(dp[A[i].t], seg.query(A[i].s - 1, A[i].t + 1) + A[i].cost);
            dp[A[i].t] = v;
            seg.update(A[i].t, v);
        }

        if (dp[E] == INF)
            return -1;
        return dp[E];
    }

    int main() {
        scanf("%d %d %d", &N, &M, &E);
        E -= M;
        for (int i = 0; i < N; i++) {
            ll s, t, cost;
            scanf("%lld %lld %lld", &s, &t, &cost);
            s -= M;
            t -= M;
            A[i] = (I) {s, t, cost};
        }

        printf("%lld\n", solve());

        return 0;
    }
