#####################################
[POJ] 3420. Quad Tiling
#####################################

.. sidebar:: Tags

    - ``tag_fast_pow``
    - ``tag_dp``

.. contents:: TOC
    :depth: 2


******************************************************
`題目 <http://poj.org/problem?id=3420>`_
******************************************************

使用 1x2 與 2x1 的瓷磚鋪滿 4xN 的格子，請問有多少種方法？
輸出方法數 mod M 後的結果

************************
Specification
************************

::

    1 <= N <= 10^9
    1 <= M <= 10^5

************************
分析
************************

.. note:: 矩陣快速冪

先想出 dp 的轉移方程式，再轉成矩陣的型式，用短陣快速冪來加速。

先設 dp（這幾項是在推轉移方程式中發現會用到的項）

.. image:: https://i.imgur.com/F2yXjrQ.png

畫一下，可以推出以下轉移方程式（考慮填滿第 i row 的各種方式）
::

    dp[i][0] = dp[i-1][0] + dp[i-1][1] + dp[i-1][2] + dp[i-1][3] + dp[i-2][0]
    dp[i][1] = dp[i-1][0] + dp[i-1][3]
    dp[i][2] = dp[i-1][0] + dp[i-1][4]
    dp[i][3] = dp[i-1][0] + dp[i-1][1]
    dp[i][4] = dp[i-1][2]

寫成矩陣

.. math::

    \begin{bmatrix} dp[i][0] \\ dp[i][1] \\ dp[i][2] \\ dp[i][3] \\ dp[i][4] \\ \quad  \end{bmatrix}=\quad \begin{bmatrix} 1 & 1 & 1 & 1 & 0 & 1 \\ 1 & 0 & 0 & 1 & 0 & 0 \\ 1 & 0 & 0 & 0 & 1 & 0 \\ 1 & 1 & 0 & 0 & 0 & 0 \\ 0 & 0 & 1 & 0 & 0 & 0 \\  &  &  &  &  &  \end{bmatrix} \begin{bmatrix} dp[i-1][0] \\ dp[i-1][1] \\ dp[i-1][2] \\ dp[i-1][3] \\ dp[i-1][4] \\ dp[i-2][0] \end{bmatrix}

使之成為遞迴的形式

.. math::

    \begin{bmatrix} dp[i][0] \\ dp[i][1] \\ dp[i][2] \\ dp[i][3] \\ dp[i][4] \\ dp[i-1][0] \end{bmatrix}=\quad \begin{bmatrix} 1 & 1 & 1 & 1 & 0 & 1 \\ 1 & 0 & 0 & 1 & 0 & 0 \\ 1 & 0 & 0 & 0 & 1 & 0 \\ 1 & 1 & 0 & 0 & 0 & 0 \\ 0 & 0 & 1 & 0 & 0 & 0 \\  &  &  &  &  &  \end{bmatrix} \begin{bmatrix} dp[i-1][0] \\ dp[i-1][1] \\ dp[i-1][2] \\ dp[i-1][3] \\ dp[i-1][4] \\ dp[i-2][0] \end{bmatrix}

填上數字

.. math::

    \begin{bmatrix} dp[i][0] \\ dp[i][1] \\ dp[i][2] \\ dp[i][3] \\ dp[i][4] \\ dp[i-1][0] \end{bmatrix}=\quad \begin{bmatrix} 1 & 1 & 1 & 1 & 0 & 1 \\ 1 & 0 & 0 & 1 & 0 & 0 \\ 1 & 0 & 0 & 0 & 1 & 0 \\ 1 & 1 & 0 & 0 & 0 & 0 \\ 0 & 0 & 1 & 0 & 0 & 0 \\ 1 & 0 & 0 & 0 & 0 & 0 \end{bmatrix} \begin{bmatrix} dp[i-1][0] \\ dp[i-1][1] \\ dp[i-1][2] \\ dp[i-1][3] \\ dp[i-1][4] \\ dp[i-2][0] \end{bmatrix}

推導

.. math::

    \begin{bmatrix} dp[i][0] \\ dp[i][1] \\ dp[i][2] \\ dp[i][3] \\ dp[i][4] \\ dp[i-1][0] \end{bmatrix}=\quad { \begin{bmatrix} 1 & 1 & 1 & 1 & 0 & 1 \\ 1 & 0 & 0 & 1 & 0 & 0 \\ 1 & 0 & 0 & 0 & 1 & 0 \\ 1 & 1 & 0 & 0 & 0 & 0 \\ 0 & 0 & 1 & 0 & 0 & 0 \\ 1 & 0 & 0 & 0 & 0 & 0 \end{bmatrix} }^{ i-1 }\begin{bmatrix} dp[1][0] \\ dp[1][1] \\ dp[1][2] \\ dp[1][3] \\ dp[1][4] \\ dp[0][0] \end{bmatrix}


推幾個範例（N = 2 時，答案是 5），即可得知 dp 的 Base case，即

.. math::

    \begin{bmatrix} dp[i][0] \\ dp[i][1] \\ dp[i][2] \\ dp[i][3] \\ dp[i][4] \\ dp[i-1][0] \end{bmatrix}=\quad { \begin{bmatrix} 1 & 1 & 1 & 1 & 0 & 1 \\ 1 & 0 & 0 & 1 & 0 & 0 \\ 1 & 0 & 0 & 0 & 1 & 0 \\ 1 & 1 & 0 & 0 & 0 & 0 \\ 0 & 0 & 1 & 0 & 0 & 0 \\ 1 & 0 & 0 & 0 & 0 & 0 \end{bmatrix} }^{ i-1 }\begin{bmatrix} 1 \\ 1 \\ 1 \\ 1 \\ 0 \\ 1 \end{bmatrix}


之後就短陣快速冪的模版直接開啦。
可以在 O(lg(N)) 的時間求出 dp[N][0]

************************
AC Code
************************

.. code-block:: cpp
    :linenos:

    #include <cstdio>
    #include <vector>
    using namespace std;

    typedef long long ll;
    typedef vector<ll> vec;
    typedef vector<vec> mat;

    int N, MOD;

    mat mul(const mat& a, const mat& b) {
        mat res(a.size(), vec(b[0].size(), 0));
        for (int r = 0; r < int(a.size()); r++)
            for (int c = 0; c < int(b[0].size()); c++)
                for (int k = 0; k < int(b.size()); k++)
                    res[r][c] = (res[r][c] + a[r][k] * b[k][c] % MOD) % MOD;

        return res;
    }

    mat pow(const mat& a, int b) {
        mat ans(a.size(), vec(a.size(), 0));
        for (int i = 0; i < int(a.size()); i++)
            ans[i][i] = 1;

        mat base = a;
        while (b) {
            if (b & 1) ans = mul(ans, base);
            base = mul(base, base);
            b >>= 1;
        }

        return ans;
    }

    int main() {
        int T[6][6] = {
            { 1, 1, 1, 1, 0, 1 },
            { 1, 0, 0, 1, 0, 0 },
            { 1, 0, 0, 0, 1, 0 },
            { 1, 1, 0, 0, 0, 0 },
            { 0, 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0, 0 }
        };

        int Base[6][1] = {
            { 1 },
            { 1 },
            { 1 },
            { 1 },
            { 0 },
            { 1 },
        };

        mat A(6, vec(6, 0));
        for (int r = 0; r < 6; r++)
            for (int c = 0; c < 6; c++)
                A[r][c] = T[r][c];
        mat B(6, vec(1, 0));
        for (int r = 0; r < 6; r++)
            B[r][0] = Base[r][0];

        while (scanf("%d %d", &N, &MOD)) {
            if (N == 0 && MOD == 0) break;

            mat res = mul(pow(A, N - 1), B);
            printf("%lld\n", res[0][0]);
        }
        return 0;
    }
