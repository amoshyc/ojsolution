#####################################
[POJ] 3258. River Hopscotch
#####################################

.. sidebar:: Tags

    - ``tag_binary_search``
    - ``tag_greedy``

.. contents:: TOC
    :depth: 2


******************************************************
`題目 <http://poj.org/problem?id=3258>`_
******************************************************

整數數線上，有一個石頭在原點代表起點，一個石頭在 L 代表終點，他們之間有 N 個石頭分別在 D[i]。
想從起點移動到終點，只能從一個石頭跳到相鄰的下一個石頭，其中，最短的跳躍距離定義為 s。
換句話說，s 就是相鄰石頭間的最短距離。

現在想從起點終點以外的 N 個石頭中移走 M 個石頭，
對於每一種移法，移完後都有一個新的最短跳躍距離 s' (s' >= s) 產生。
請輸出 s' 可能的最大值。

************************
Specification
************************

::

    0 <= N <= 50000
    1 <= L <= 10^9
    0 < D[i] < L
    0 <= M <= N

************************
分析
************************

.. note:: 最小值最大化

最小值最大化，標準的二分搜。
二分搜教學請參 `這 <http://amoshycs.readthedocs.org/en/latest/tutorials/binary_search.html>`_

判斷函式為::

    bool C(int d) = 移除 M 個石頭後，可否能使相鄰石頭間的最短距離 >= d。

該函式明顯有單調性，相鄰石頭間的最短距離 d 越小越容易達成。

這個函式可以用 Greedy 實作::

    從左至右迭代「起點終點外」的每個石頭 rocks[i]，
    若該石頭與前一個石頭的距離 < d，我們必需移除該石頭，才能使相鄰石頭的距離 >= d。
    我們計算總共有多少個石頭要移除，該個數必需 <= M。

實作時，有兩點要注意::

    1. 若 rocks[i - 1], rocks[i], rocks[i + 1] 中，rocks[i] 被移除了，
       那 rocks[i + 1] 的前一顆石頭是 rocks[i - 1]，而不是 rocks[i]。

    2. 上述演算法沒考慮到終點與其前一個石頭。
       設中間那 N 個石頭中，最後面的那個石頭為 rocks[-2]，若與終點那石頭的距離 < d，
       則要移除的是 rocks[-2]，而不是終點的石頭，因為終點那個石頭是不能移除的。

----------------------------

解的空間 [0, L]。
下界即為在還沒移除任何石頭前，相鄰石頭間最短距離，但要計算出此值還得多打一些程式碼，
而我們知道此值必大於 0，反正 C(0) = 1，所以可以直接將下界設為 0。
上界發生在 M = N 時，相鄰石頭間最短距離即為 L。

C(d) 在解的空間 [0, L] 上的分佈為::

    ... 1 1 1 0 0 0 0 ...

我們的目標是求左邊數來的最後一個 1 在哪？

另外，存在全部都為 1 的情況，我們可以預判掉這情形。

************************
AC Code
************************

.. code-block:: cpp
    :linenos:

    #include <iostream>
    #include <algorithm>
    #include <cstdio>
    #include <cstdlib>
    #include <cstring>

    using namespace std;

    const int MAX_N = 50000;

    int L, N, M;
    int rocks[MAX_N + 2];

    bool C(int d) {
        int cnt = 0;
        int prev = 0; // 前一個石頭是誰，初使值為起點 rocks[0]
        for (int i = 1; i < N + 1; i++) {
            if (rocks[i] - rocks[prev] < d) // 若相鄰距離 < d，移除 rocks[i]。
                cnt++;
            else
                prev = i; // 維護前一個石頭
        }

        // 終點與其前一個的情況
        if (rocks[N + 1] - rocks[prev] < d) {
            cnt++;
            // prev = N + 1 // 後面沒石頭了，沒必要繼續維護
        }

        return cnt <= M;
    }

    int solve() {
        sort(rocks + 1, rocks + N + 1);

        if (C(L)) return L;

        // ... 1 1 1 1 0 0 0 ...
        int lb = 0, ub = L;
        while (ub - lb > 1) {
            int mid = (lb + ub) / 2;
            if (C(mid)) lb = mid;
            else ub = mid;
        }

        return lb;
    }

    int main() {
        scanf("%d %d %d", &L, &N, &M);
        for (int i = 1; i <= N; i++)
            scanf("%d", &rocks[i]);

        rocks[0] = 0;
        rocks[N+1] = L;

        printf("%d\n", solve());

        return 0;
    }
