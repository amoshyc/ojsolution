#####################################
[POJ] 3368. Frequent values
#####################################

.. sidebar:: Tags

    - ``tag_segment_tree``
    - ``tag_sparse_table``

.. contents:: TOC
    :depth: 2


******************************************************
`題目 <http://poj.org/problem?id=3368>`_
******************************************************

給定長度為 N，單調遞增的序列 A[]，與 Q 筆詢問，
針對每筆詢問 a, b，輸出 [a, b] 區間中出現最多次的值。

************************
Specification
************************

::

    1 <= N, Q <= 10^5
    -10^5 <= A[i] <= A[i + 1] <= 10^5

************************
分析
************************

.. note:: 離散化 + RMQ

因為是單調遞增，所以相同的值會在一起。
設有 N 個相同值的區間，可以離散化成一個節點，值為 N。如圖

.. image:: http://i.imgur.com/ZdFZ0C5.png

如果我們有同時記錄原始區間的開頭與結尾，那這題就可以轉化成為最大值的 RMQ 問題。

針對詢問 [a, b]::

    id[a] = 離散化後 a 所在的節點編號
    id[b] = 離散化後 b 所在的節點編號
    [ lend[id[a]], rend[id[a]] ) = a 所在的節點對應的原始區間
    [ lend[id[b]], rend[id[b]] ) = b 所在的節點對應的原始區間

針對 a, b 各對應的節點，有三種情況

.. image:: http://imgur.com/ggwGrea.png

::

    1. 相同節點
    2. 相鄰節點
    3. 其它

答案分別為::

    1. b - a + 1
    2. max(rend[id[a]] - a, lend[id[b]] - b + 1)
    3. max(
         rend[id[a]] - a,
         lend[id[a]] - b + 1,
         maximum of [id[a] + 1, id[b] - 1]
       )

其中，第三種情況的第三個式子可以用前面建出來的線段樹或 Sparse Table 快速得到。


************************
AC Code 1
************************

.. code-block:: cpp
    :linenos:

    #include <iostream>
    #include <vector>
    #include <queue>
    #include <algorithm>
    #include <cstdio>
    #include <cstdlib>
    #include <cstring>
    using namespace std;

    const int MAX_N = 100000;
    const int MAX_NN = (1 << 20); // should be bigger than MAX_N

    int N, Q;
    int inp[MAX_N];

    int id[MAX_N];
    int len[MAX_N];
    int lend[MAX_N]; // [lend[i], rend[i])
    int rend[MAX_N];

    int NN;
    int seg[2 * MAX_NN - 1];

    void seg_gather(int u) {
        seg[u] = max(seg[u * 2 + 1], seg[u * 2 + 2]);
    }

    void seg_init() {
        NN = 1;
        while (NN < N)
            NN *= 2;

        memset(seg, 0, sizeof(seg));    // val that won't affect result
        memcpy(seg + NN - 1, len, sizeof(int) * N); // fill in leaves
    }

    void seg_build(int u) {
        if (u >= NN - 1) { // leaf
            return;
        }

        seg_build(u * 2 + 1);
        seg_build(u * 2 + 2);
        seg_gather(u);
    }

    int seg_query(int a, int b, int u, int l, int r) {
        if (l >= b || r <= a) {
            return 0;
        }

        if (a <= l && r <= b) {
            return seg[u];
        }

        int m = (l + r) / 2;
        int res1 = seg_query(a, b, u * 2 + 1, l, m);
        int res2 = seg_query(a, b, u * 2 + 2, m, r);

        return max(res1, res2);
    }

    int main() {
        while (scanf("%d %d", &N, &Q) == 2) {
            for (int i = 0; i < N; i++) {
                scanf("%d", &inp[i]);
            }

            // [s, t)
            int s = 0, t = 0, idx = 0;
            while (s < N) {
                while (t < N && inp[t] == inp[s]) {
                    id[t++] = idx;
                }

                lend[idx] = s;
                rend[idx] = t;
                len[idx] = t - s;

                s = t;
                idx++;
            }

            N = idx;
            seg_init();
            seg_build(0);

            while (Q--) {
                int a, b; scanf("%d %d", &a, &b); a--; b--;

                if (id[a] == id[b]) {
                    printf("%d\n", b - a + 1);
                    continue;
                }

                if (id[a] + 1 == id[b]) {
                    int len_a = rend[id[a]] - a;
                    int len_b = b + 1 - lend[id[b]];
                    printf("%d\n", max(len_a, len_b));
                    continue;
                }

                int len_a = rend[id[a]] - a;
                int len_b = b + 1 - lend[id[b]];
                int len_inner = seg_query(id[a] + 1, id[b], 0, 0, NN);

                printf("%d\n", max(max(len_a, len_b), len_inner));
            }
        }
        return 0;
    }

************************
AC Code 2
************************

.. code-block:: cpp
    :linenos:

    #include <iostream>
    #include <vector>
    #include <queue>
    #include <algorithm>
    #include <cstdio>
    #include <cstdlib>
    #include <cstring>
    #include <cmath>
    using namespace std;

    const int MAX_N = 100000;
    const int MAX_LOG_N = 20;

    int N, Q;
    int inp[MAX_N];

    int id[MAX_N];
    int len[MAX_N];
    int lend[MAX_N]; // [lend[i], rend[i])
    int rend[MAX_N];

    int sptb[MAX_LOG_N][MAX_N];
    // sptb[i][j] = max value of [j, j + 2^i)

    void sptb_init() {
        for (int i = 0; i < N; i++) {
            sptb[0][i] = len[i];
        }

        for (int i = 1; (1 << i) <= N; i++) {
            for (int j = 0; j + (1 << i) <= N; j++) {
                sptb[i][j] = max(sptb[i - 1][j], sptb[i - 1][j + (1 << (i - 1))]);
            }
        }
    }

    // [l, r)
    int sptb_query(int l, int r) {
        int k = floor(log2(double(r - l)));
        int res1 = sptb[k][l];
        int res2 = sptb[k][r - (1 << k)];
        return max(res1, res2);
    }

    int main() {
        while (scanf("%d %d", &N, &Q) == 2) {
            for (int i = 0; i < N; i++) {
                scanf("%d", &inp[i]);
            }

            // [s, t)
            int s = 0, t = 0, idx = 0;
            while (s < N) {
                while (t < N && inp[t] == inp[s]) {
                    id[t++] = idx;
                }

                lend[idx] = s;
                rend[idx] = t;
                len[idx] = t - s;

                s = t;
                idx++;
            }

            N = idx;
            sptb_init();

            while (Q--) {
                int a, b; scanf("%d %d", &a, &b); a--; b--;

                if (id[a] == id[b]) {
                    printf("%d\n", b - a + 1);
                    continue;
                }

                if (id[a] + 1 == id[b]) {
                    int len_a = rend[id[a]] - a;
                    int len_b = b + 1 - lend[id[b]];
                    printf("%d\n", max(len_a, len_b));
                    continue;
                }

                int len_a = rend[id[a]] - a;
                int len_b = b + 1 - lend[id[b]];
                int len_inner = sptb_query(id[a] + 1, id[b]);

                printf("%d\n", max(max(len_a, len_b), len_inner));
            }
        }
        return 0;
    }
